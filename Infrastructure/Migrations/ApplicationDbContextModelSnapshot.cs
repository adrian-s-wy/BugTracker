// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("Domain.Entities.Bug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bug_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasColumnName("description");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("environment");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_at");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int")
                        .HasColumnName("priority_id");

                    b.Property<int>("ProjectVersionId")
                        .HasColumnType("int")
                        .HasColumnName("project_version_id");

                    b.Property<string>("Reproduce")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasColumnName("reproduce");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<string>("SuggestionForFix")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasColumnName("suggestion_for_fix");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectVersionId");

                    b.HasIndex("StatusId");

                    b.ToTable("Bugs");
                });

            modelBuilder.Entity("Domain.Entities.DomainTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasColumnName("description");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("due_date");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_at");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int")
                        .HasColumnName("priority_id");

                    b.Property<int>("ProjectVersionId")
                        .HasColumnType("int")
                        .HasColumnName("project_version_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectVersionId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Domain.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("note_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasColumnName("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("note_type")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");

                    b.HasDiscriminator<string>("note_type").HasValue("Note");
                });

            modelBuilder.Entity("Domain.Entities.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("priority_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Priorities");
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Domain.Entities.ProjectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("project_group_id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("role");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int")
                        .HasColumnName("user_group_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("ProjectGroups");
                });

            modelBuilder.Entity("Domain.Entities.ProjectVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("version_id");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime")
                        .HasColumnName("deadline");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("number");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("realease_date");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectVersions");
                });

            modelBuilder.Entity("Domain.Entities.Relations.BugTask", b =>
                {
                    b.Property<int>("BugId")
                        .HasColumnType("int")
                        .HasColumnName("bug_id");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.HasKey("BugId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("BugTask");
                });

            modelBuilder.Entity("Domain.Entities.Relations.GroupMember", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("UserGrupId")
                        .HasColumnType("int")
                        .HasColumnName("user_group_id");

                    b.HasKey("UserId", "UserGrupId");

                    b.HasIndex("UserGrupId");

                    b.ToTable("GroupMember");
                });

            modelBuilder.Entity("Domain.Entities.Relations.RelatedBug", b =>
                {
                    b.Property<int>("RelatedFromId")
                        .HasColumnType("int")
                        .HasColumnName("related_from_id");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int")
                        .HasColumnName("related_to_id");

                    b.Property<string>("RelationDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("description");

                    b.HasKey("RelatedFromId", "RelatedToId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("RelatedBug");
                });

            modelBuilder.Entity("Domain.Entities.Relations.RelatedTask", b =>
                {
                    b.Property<int>("RelatedFromId")
                        .HasColumnType("int")
                        .HasColumnName("related_from_id");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int")
                        .HasColumnName("related_to_id");

                    b.Property<string>("RelationDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("description");

                    b.HasKey("RelatedFromId", "RelatedToId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("RelatedTask");
                });

            modelBuilder.Entity("Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("last_name");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Domain.Entities.BugNote", b =>
                {
                    b.HasBaseType("Domain.Entities.Note");

                    b.Property<int>("BugId")
                        .HasColumnType("int")
                        .HasColumnName("bug_id");

                    b.HasIndex("BugId");

                    b.HasDiscriminator().HasValue("BN");
                });

            modelBuilder.Entity("Domain.Entities.TaskNote", b =>
                {
                    b.HasBaseType("Domain.Entities.Note");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.HasIndex("TaskId");

                    b.HasDiscriminator().HasValue("TN");
                });

            modelBuilder.Entity("Domain.Entities.Bug", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("Bugs")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Priority", "Priority")
                        .WithMany("Bugs")
                        .HasForeignKey("PriorityId")
                        .HasConstraintName("FK_bug_priority")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectVersion", "ProjectVersion")
                        .WithMany("Bugs")
                        .HasForeignKey("ProjectVersionId")
                        .HasConstraintName("FK_bug_project_version")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Status", "Status")
                        .WithMany("Bugs")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_bug_status")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Priority");

                    b.Navigation("ProjectVersion");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.Entities.DomainTask", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("Tasks")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_task_user")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Priority", "Priority")
                        .WithMany("Tasks")
                        .HasForeignKey("PriorityId")
                        .HasConstraintName("FK_task_priority")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectVersion", "ProjectVersion")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectVersionId")
                        .HasConstraintName("FK_task_project_version")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Status", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_task_status")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Priority");

                    b.Navigation("ProjectVersion");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.Entities.Note", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_note_user")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ProjectGroup", b =>
                {
                    b.HasOne("Domain.Entities.Project", "Project")
                        .WithMany("ProjectGroups")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_project_group_project")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserGroup", "UserGroup")
                        .WithMany("ProjectGroups")
                        .HasForeignKey("UserGroupId")
                        .HasConstraintName("FK_project_group_user_group")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Domain.Entities.ProjectVersion", b =>
                {
                    b.HasOne("Domain.Entities.Project", "Project")
                        .WithMany("ProjectVersions")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_project_version_project")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Relations.BugTask", b =>
                {
                    b.HasOne("Domain.Entities.Bug", "Bug")
                        .WithMany("BugTasks")
                        .HasForeignKey("BugId")
                        .HasConstraintName("FK_bugtask_bug")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DomainTask", "Task")
                        .WithMany("BugTasks")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_bugtask_task")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bug");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Domain.Entities.Relations.GroupMember", b =>
                {
                    b.HasOne("Domain.Entities.UserGroup", "UserGroup")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserGrupId")
                        .HasConstraintName("FK_groupmember_usergroup")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("GroupsMember")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_groupmember_user")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Domain.Entities.Relations.RelatedBug", b =>
                {
                    b.HasOne("Domain.Entities.Bug", "RelatedFrom")
                        .WithMany("RelatedFrom")
                        .HasForeignKey("RelatedFromId")
                        .HasConstraintName("FK_relatedbug_bug_from")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Bug", "RelatedTo")
                        .WithMany("RelatedTo")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_relatedbug_bug_to")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RelatedFrom");

                    b.Navigation("RelatedTo");
                });

            modelBuilder.Entity("Domain.Entities.Relations.RelatedTask", b =>
                {
                    b.HasOne("Domain.Entities.DomainTask", "RelatedFrom")
                        .WithMany("RelatedFrom")
                        .HasForeignKey("RelatedFromId")
                        .HasConstraintName("FK_relatedtask_task_from")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DomainTask", "RelatedTo")
                        .WithMany("RelatedTo")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_relatedtask_task_to")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RelatedFrom");

                    b.Navigation("RelatedTo");
                });

            modelBuilder.Entity("Domain.Entities.BugNote", b =>
                {
                    b.HasOne("Domain.Entities.Bug", "Bug")
                        .WithMany("Notes")
                        .HasForeignKey("BugId")
                        .HasConstraintName("FK_bug_note_bug")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bug");
                });

            modelBuilder.Entity("Domain.Entities.TaskNote", b =>
                {
                    b.HasOne("Domain.Entities.DomainTask", "Task")
                        .WithMany("Notes")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_task_note_task")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Domain.Entities.Bug", b =>
                {
                    b.Navigation("BugTasks");

                    b.Navigation("Notes");

                    b.Navigation("RelatedFrom");

                    b.Navigation("RelatedTo");
                });

            modelBuilder.Entity("Domain.Entities.DomainTask", b =>
                {
                    b.Navigation("BugTasks");

                    b.Navigation("Notes");

                    b.Navigation("RelatedFrom");

                    b.Navigation("RelatedTo");
                });

            modelBuilder.Entity("Domain.Entities.Priority", b =>
                {
                    b.Navigation("Bugs");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectGroups");

                    b.Navigation("ProjectVersions");
                });

            modelBuilder.Entity("Domain.Entities.ProjectVersion", b =>
                {
                    b.Navigation("Bugs");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Entities.Status", b =>
                {
                    b.Navigation("Bugs");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Bugs");

                    b.Navigation("GroupsMember");

                    b.Navigation("Notes");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Entities.UserGroup", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("ProjectGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
